; ========================================
; CONFIGURAÇÃO CUSTOMIZADA PARA MENSAGENS
; ========================================
; Este arquivo não será sobrescrito pelo FreePBX
; Adicione esta linha no final do extensions.conf do FreePBX:
; #include extensions_custom.conf

[textmessages]
; Contexto EXCLUSIVO para processar mensagens SIP
; Este contexto só é executado quando há dados de MESSAGE
exten => _.,1,NoOp(=== MENSAGEM SIP RECEBIDA ===)
exten => _.,n,NoOp(Canal: ${CHANNEL})
exten => _.,n,NoOp(De: ${MESSAGE(from)})
exten => _.,n,NoOp(Para: ${MESSAGE(to)})
exten => _.,n,NoOp(Corpo: ${MESSAGE(body)})

; Método mais simples e confiável para extrair usuários
; FROM: "1004" <sip:1004@phone.voipeasy.com.br> -> extrair 1004
exten => _.,n,Set(FROM_TEMP=${MESSAGE(from)})
exten => _.,n,Set(FROM_USER=${REGEX("([0-9]+)" ${FROM_TEMP})})

; TO: pjsip:1000@phone.voipeasy.com.br -> extrair 1000  
exten => _.,n,Set(TO_TEMP=${MESSAGE(to)})
exten => _.,n,Set(TO_USER=${REGEX("([0-9]+)" ${TO_TEMP})})

; Se não conseguiu extrair com REGEX, usar CUT como fallback
exten => _.,n,GotoIf($["${FROM_USER}" = ""]?extract_from_cut)
exten => _.,n,GotoIf($["${TO_USER}" = ""]?extract_to_cut)
exten => _.,n,Goto(continue)

; Fallback usando CUT
exten => _.,n(extract_from_cut),Set(FROM_SIP=${CUT(FROM_TEMP,<,2)})
exten => _.,n,Set(FROM_SIP=${CUT(FROM_SIP,>,1)})
exten => _.,n,Set(FROM_USER=${CUT(FROM_SIP,:,2)})
exten => _.,n,Set(FROM_USER=${CUT(FROM_USER,@,1)})

exten => _.,n(extract_to_cut),Set(TO_SIP=${CUT(TO_TEMP,:,2)})
exten => _.,n,Set(TO_USER=${CUT(TO_SIP,@,1)})

exten => _.,n(continue),NoOp(De usuário: ${FROM_USER})
exten => _.,n,NoOp(Para usuário: ${TO_USER})

; Verificar se conseguimos extrair os usuários
exten => _.,n,GotoIf($["${FROM_USER}" = ""]?error)
exten => _.,n,GotoIf($["${TO_USER}" = ""]?error)

; Verificar se o destinatário existe como endpoint
exten => _.,n,Set(ENDPOINT_STATE=${PJSIP_ENDPOINT(${TO_USER},device_state)})
exten => _.,n,NoOp(Estado do endpoint ${TO_USER}: ${ENDPOINT_STATE})

; Tentar enviar a mensagem
exten => _.,n,MessageSend(pjsip:${TO_USER},${MESSAGE(from)})
exten => _.,n,NoOp(Mensagem enviada para ${TO_USER})
exten => _.,n,Goto(end)

; Tratamento de erro
exten => _.,n(error),NoOp(ERRO: Não foi possível extrair usuários)
exten => _.,n,NoOp(FROM original: ${MESSAGE(from)})
exten => _.,n,NoOp(TO original: ${MESSAGE(to)})
exten => _.,n,NoOp(FROM extraído: ${FROM_USER})
exten => _.,n,NoOp(TO extraído: ${TO_USER})

exten => _.,n(end),Hangup()

; Contexto para subscriptions (presença)
[subscriptions]
exten => _.,1,NoOp(=== SUBSCRIPTION REQUEST ===)
exten => _.,n,NoOp(Subscription de: ${EXTEN})
exten => _.,n,Hangup()

; Contexto separado para testes via CHAMADA (não mensagem)
[from-internal-custom]
; Extensões de teste que podem ser discadas
exten => 999,1,NoOp(=== TESTE DE MENSAGEM VIA CHAMADA ===)
exten => 999,n,NoOp(Enviando mensagem de teste de 1004 para 1000)
exten => 999,n,MessageSend(pjsip:1000,pjsip:1004)
exten => 999,n,NoOp(Mensagem de teste enviada)
exten => 999,n,Answer()
exten => 999,n,Playback(beep)
exten => 999,n,Hangup()

exten => 998,1,NoOp(=== TESTE DE MENSAGEM SIMPLES ===)
exten => 998,n,MessageSend(pjsip:1000,"Teste automatico - ${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)}")
exten => 998,n,NoOp(Mensagem simples enviada para 1000)
exten => 998,n,Answer()
exten => 998,n,Playback(beep)
exten => 998,n,Hangup()

exten => 997,1,NoOp(=== TESTE BIDIRECIONAL ===)
exten => 997,n,MessageSend(pjsip:1004,"Mensagem de 1000 para 1004")
exten => 997,n,Wait(1)
exten => 997,n,MessageSend(pjsip:1000,"Mensagem de 1004 para 1000")
exten => 997,n,NoOp(Mensagens bidirecionais enviadas)
exten => 997,n,Answer()
exten => 997,n,Playback(beep)
exten => 997,n,Hangup() 